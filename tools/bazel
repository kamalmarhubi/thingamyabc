#!/bin/bash

# Bazel wrapper that runs the version in tools/bazel-version of a workspace.
#
# All arguments are passed on to bazel. Works with bazel-version set to 0.4.x+.
#
# Env vars:
#   - BAZEL_VERSION_TRACE -- trace shell commands if set

# The bazel executable installed by the bazel package / brew formula is a
# script that checks for an executable file in the workspace at tools/bazel,
# and run that (ie this script) if it's found, falling back to the installed
# version if it's not. The fallback is named bazel-real.
#
# This script ensures that the version specified in tools/bazel-version is
# installed at a known location in the OS-specific user cache directory, and
# then runs that version.
#
# Bazel versions will be installed at
#
#    $CACHE_DIR/bazel-wrapper/$VERSION-$OS-$ARCH
#
# CACHE_DIR is $XDG_CACHE_HOME on Linux (defaulting to $HOME/.cache per XDG
# Base Directory Specification), and $HOME/Library/Caches on OS X.

set -o errexit
set -o nounset
set -o pipefail

if [[ "${BAZEL_VERSION_TRACE:-undefined}" != undefined ]]; then
  set -o xtrace
fi

# uname returns Initialcap strings for -s, but bazel releases use lowercase, so
# downcase it.
OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
ARCH="$(uname -m)"

case "$OS" in
  linux)
    readonly CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}"
    ;;
  darwin)
    readonly CACHE_DIR="$HOME/Library/Caches"
    ;;
esac

readonly BAZEL_RELEASE_BASE_URL=https://github.com/bazelbuild/bazel/releases/download
readonly BAZEL_ROOT_DIR="$CACHE_DIR/bazel-wrapper"
readonly BAZEL_REAL=lib/bazel/bin/bazel-real

# This assumes the current script is under the tools directory.
TOOLS_DIR="$(dirname "${BASH_SOURCE[0]}")"
readonly TOOLS_DIR

die() {
  echo "$@" >&2
  exit 1
}

# Runs bazel version with ARGS, installing the version if necessary.
#
# Usage: main ARGS
main() {
  local version
  version="$(get_bazel_version)"

  local bazel="$BAZEL_ROOT_DIR/$version-$OS-$ARCH/$BAZEL_REAL"

  [[ -x "$bazel" ]] \
    || install "$version" \
    || die "failed to install bazel $version"

  exec "$bazel" "$@"
}

# Writes the bazel version from tools/bazel-version to stdout.
#
# Usage: get_bazel_version
get_bazel_version() {
  if [[ ! -r $TOOLS_DIR/bazel-version ]]; then
    echo "no tools/bazel-version in workspace" >&2
    exit 1
  fi

  cat "$TOOLS_DIR/bazel-version"
}

# Installs VERSION.
#
# Usage: install VERSION
install() {
  local version="$1"

  local tmpdir
  tmpdir="$(mktemp -d "${TMPDIR:-/tmp}/bazel-$version-installer.XXXXXX")"
  # Silence shellcheck warning that double quotes will make this expand here
  # instead of when the trap runs, but that's exactly what we want to happen.
  # shellcheck disable=SC2064
  trap "rm -rf $tmpdir" EXIT

  local installer
  installer="$(TMPDIR="$tmpdir" download_installer "$version")"
  local status=$?
  (( status == 0 )) || die "failed to download installer"

  chmod +x "$installer"

  # The installer prints the release notes which aren't that useful here.
  "$installer" --prefix="$BAZEL_ROOT_DIR/$version-$OS-$ARCH" >/dev/null

  rm -rf "$tmpdir"
}

# Downloads bazel installer for VERSION and prints the destination file name.
#
# Usage: get_bazel_installer_url VERSION DST
#
# Expects TMPDIR is set to a directory.
#
# Verifies the installer's signature with the embedded BAZEL_RELEASE_KEY.
download_installer() {
  local version="$1"

  local installer="bazel-$version-installer-$OS-$ARCH.sh"
  local sig="$installer.sig"

  local installer_url="$BAZEL_RELEASE_BASE_URL/$version/$installer"
  local sig_url="$BAZEL_RELEASE_BASE_URL/$version/$sig"

  echo "Downloading bazel $version installer for $OS-$ARCH..." >&2

  curl \
    --silent \
    --show-error \
    --location \
    "$sig_url" \
    > "$TMPDIR/$sig" \
    || return 1

  curl \
    --location \
    --progress-bar \
    "$installer_url" \
    > "$TMPDIR/$installer" \
    || return 1

  verify "$TMPDIR/$sig" "$TMPDIR/$installer"
  case $? in
    0)
      # All good.
      ;;
    # verify will exit with 42 if gpg is not on the path, which we'll allow.
    42)
      echo "WARNING: gpg not found on PATH, not verifying installer" >&2
      ;;
    *)
      # Bubble the error up.
      return $status
  esac

  echo "$TMPDIR/$installer"
}

# Verifies a signature with the embedded bazel release key.
#
# Usage: verify SIGNATURE FILE
#
# Exits with 42 if gpg is not on the path. Expects TMPDIR is set to a
# directory.
verify() {
  if [[ ! -x "$(which gpg)" ]]; then
    return 42
  fi

  echo "$BAZEL_RELEASE_KEY" \
    | gpg \
      --dearmor \
      --output "$TMPDIR/bazel-release.pub.gpg"

  gpg \
    --no-default-keyring \
    --keyring "$TMPDIR/bazel-release.pub.gpg" \
    --trust-model always \
    --verify "$TMPDIR/$sig" "$TMPDIR/$installer"
}

# ASCII armored public key from https://bazel.build/bazel-release.pub.gpg.
read -r -d '' BAZEL_RELEASE_KEY << 'EOF' || true
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQINBFdEmzkBEACzj8tMYUau9oFZWNDytcQWazEO6LrTTtdQ98d3JcnVyrpT16yg
I/QfGXA8LuDdKYpUDNjehLtBL3IZp4xe375Jh8v2IA2iQ5RXGN+lgKJ6rNwm15Kr
qYeCZlU9uQVpZuhKLXsWK6PleyQHjslNUN/HtykIlmMz4Nnl3orT7lMI5rsGCmk0
1Kth0DFh8SD9Vn2G4huddwxM8/tYj1QmWPCTgybATNuZ0L60INH8v6+J2jJzViVc
NRnR7mpouGmRy/rcr6eY9QieOwDou116TrVRFfcBRhocCI5b6uCRuhaqZ6Qs28Bx
4t5JVksXJ7fJoTy2B2s/rPx/8j4MDVEdU8b686ZDHbKYjaYBYEfBqePXScp8ndul
XWwS2lcedPihOUl6oQQYy59inWIpxi0agm0MXJAF1Bc3ToSQdHw/p0Y21kYxE2pg
EaUeElVccec5poAaHSPprUeej9bD9oIC4sMCsLs7eCQx2iP+cR7CItz6GQtuZrvS
PnKju1SKl5iwzfDQGpi6u6UAMFmc53EaH05naYDAigCueZ+/2rIaY358bECK6/VR
kyrBqpeq6VkWUeOkt03VqoPzrw4gEzRvfRtLj+D2j/pZCH3vyMYHzbaaXBv6AT0e
RmgtGo9I9BYqKSWlGEF0D+CQ3uZfOyovvrbYqNaHynFBtrx/ZkM82gMA5QARAQAB
tEdCYXplbCBEZXZlbG9wZXIgKEJhemVsIEFQVCByZXBvc2l0b3J5IGtleSkgPGJh
emVsLWRldkBnb29nbGVncm91cHMuY29tPokCPgQTAQIAKAUCV0SbOQIbAwUJA8Jn
AAYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQPVkZtEhFfuA+BA/9ErVPkCbr
bwGX6HHY2h9RULnOuBOJKhqDdlAmJ9Bi1TwliG72rXO52mO7WbSJ4Ux+5bbO3kiz
UId6xr6FZmTJiHCY42gwgLOHLIwd6Y7l+2PTyQ0ryL35hiPvlwhcJ4QzfF0/8MTD
vyQaieBKQQkZD+RmXJLmDGmztLhaUw0BTkONfbN0jTdIt7lAmkVZYo8JCoMbCXlk
9kkh6lx9vXZ0JQkfm1gRRWAAShsOHMYZgXsj11Y3C76zxv8jNoT8315Q4bVMKmjr
+bOaR7idiTlxRKl17eRr8qZ1AqJrwywyjFTWQpwHw3uR4iMt+QSgceKiuihpZBpv
mVtNVaMiJTkR63pRmwaGoGov4u3VMBRa6YMQaXQ1UEwrqEH+cyNZgWidlIywpgzD
4hjLYuE/dCvCVT+M32vTQVhNDCwZkmiNeVQE1R/5AdhQLSvBnLGXIfkXnsCl0vFl
oG2brgxIs3TN8oEitIeVWJ+oj5AqTRBeHIZ5MHktF/18AfPNER4UtufGxUWbAtyf
3HtmZZ03XMct52qSaKZbTY1bOmsgy6ba3Kkc9ifjYa9w9FEVysUPmLzy4+l3K5Xw
92iVYLDtCTThhYfbTJ8IWvJGE9hkyYmPF4Q0O3kFQqQmrFVADMyxR0DMIULs8U3k
bKa5K3939aSYXQAdpq6d6T0y2+XdvSHrmVu5Ag0EV0SbOQEQAOef9VQZQ6VfxJVM
i5kcjws/1fprB3Yp8sODL+QyULqbmcJTMr8Tz83OxprCH5Nc7jsw1oqzbNtq+N2p
OnbAL6XFPolQYuOjKlHGzbQvpH8ZSok6AzwrPNq3XwoB0+12A86wlpajUPfvgajN
jmESMchLnIs3qH1j5ayVICr7vH1i1Wem2J+C/z6gIaG4bko0XKAeU6fNYRmuHLHC
iBiKocpn54LmmPL4ifN7Rz1KkCaAKTT8vKtaVh0g1eswb+9W3qldm+nAc6e1ajWD
iLqhOmTQRVrght80XPYmtv2x8cdkxgECbT6T84rZtMZAdxhjdOmJ50ghPn9o/uxd
CDurhZUsu4aND6EhWw4EfdZCSt0tGQWceB9tXCKVlgc3/TXdTOB9zuyoZxkmQ6uv
rV2ffxf2VLwmR6UJSXsAz2Pd9eWJmnH+QmZPMXhOVFCMRTHTsRfAeyLW+q2xVr/r
c1nV/9PzPP29GSYVb54Fs7of2oHUuBOWp3+2oRljPeoz0SEBG/Q0TdmBqfYTol9r
GapIcROc1qg9oHV6dmQMTAkx3+Io8zlbDp3Xu2+QagtCS+94DcH9Yjh8ggM6hohX
2ofP6HQUw4TLHVTLI0iMc3MJcEZ88voQbHWKT9fYniQjKBESU21IErKT3YWP2OAo
c5RR44gCmE+r14mHCktOLLQrR6sBABEBAAGJAiUEGAECAA8FAldEmzkCGwwFCQPC
ZwAACgkQPVkZtEhFfuDc6g/+PFjc5b156juNTuSyU08/lP58vOWBeL9YxAFcRKVq
mqFQUZSs5xkEA0j0PuueHdPAmLPXO0qE3TRHHcMojI6bpnqPVR6bBHKSE+OUk2yZ
q0LRfsn/Qmn2waIDOKOxA82MAAETiG7/E+obUVGAN2E1fZ30A45eGgqcfr85QYWn
oAWhsenE4gO54ltA8YWyjYvAn+XZ7IegRQE8/Tn2sbKkg8wq/9xnX5rzwVFwanB9
Oki7djcTKeLtt9xBV6l00icB1bYAPiHGXJiBQElDXiUGqyS/yzCL0El6mbNY0NlO
kSWtfu2Rtg5pofJqs4MA8bF84//9JCHRDpQ35uBtfjhlDP0oCA1uKGM85MbBzpv/
Be12Fewqy+ofTLZZk1xPUWIUmRggw0cV2PrJpCk0Dg0E4odRI0niY4OjuA8+yiSS
AJAgYs/fSKLqbF7XMLo9yJ56Z/jrDLqO3mYUhcRAg7EiopE/VdEbFppIIu5rZ1hO
PgzFIwsuI+wrcVI1oYYbVD3gIUdJhe8QSWJ7+x1o5vQRJk0vNwh6eBJwCCeQOKn6
ikXKkkQbc3vsff7wLByyyIKs6zR8aVJk3AHs1QNBusqGZTmBRCrNHg9OJOWfrXSL
WL5zxHbfX+wspgLDLIPYFKlhSEqnfbhrK/17GAd/YF9O7TFy6FzLprmJgp9TaGao
iSI=
=i9Ui
-----END PGP PUBLIC KEY BLOCK-----
EOF
readonly BAZEL_RELEASE_KEY

main "$@"
